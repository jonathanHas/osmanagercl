# =============================================================================
# Supervisor Configuration for OS Manager Queue Worker
# Place this file in /etc/supervisor/conf.d/osmanager-queue-worker.conf
# =============================================================================

[program:osmanager-queue-worker]
process_name=%(program_name)s_%(process_num)02d
command=php /var/www/html/osmanager/artisan queue:work --sleep=3 --tries=3 --max-time=3600 --timeout=300
directory=/var/www/html/osmanager
autostart=true
autorestart=true
stopasgroup=true
killasgroup=true
user=www-data
numprocs=2
redirect_stderr=true
stdout_logfile=/var/www/html/osmanager/storage/logs/queue-worker.log
stdout_logfile_maxbytes=50MB
stdout_logfile_backups=10
stopwaitsecs=10

# Environment variables
environment=LARAVEL_QUEUE_WORKER="true"

# =============================================================================
# Configuration Explanation:
# =============================================================================
#
# process_name: Unique name for each worker process
# command: The queue worker command with optimal settings
#   --sleep=3: Sleep for 3 seconds when no jobs are available
#   --tries=3: Retry failed jobs up to 3 times
#   --max-time=3600: Restart worker after 1 hour (prevents memory leaks)
#   --timeout=300: Job timeout of 5 minutes (good for invoice parsing)
#
# directory: Working directory (Laravel application root)
# autostart: Start workers when supervisor starts
# autorestart: Restart if worker crashes
# stopasgroup: Stop all related processes as a group
# killasgroup: Kill all related processes as a group
# user: Run as www-data (same as web server)
# numprocs: Number of worker processes (adjust based on server capacity)
# redirect_stderr: Send errors to stdout log
# stdout_logfile: Log file location
# stdout_logfile_maxbytes: Max log file size before rotation
# stdout_logfile_backups: Number of backup log files to keep
# stopwaitsecs: Seconds to wait for graceful shutdown
#
# =============================================================================
# Installation Instructions:
# =============================================================================
#
# 1. Copy this file to supervisor configuration directory:
#    sudo cp osmanager-queue-worker.conf /etc/supervisor/conf.d/
#
# 2. Update supervisor configuration:
#    sudo supervisorctl reread
#    sudo supervisorctl update
#
# 3. Start the queue workers:
#    sudo supervisorctl start osmanager-queue-worker:*
#
# 4. Check worker status:
#    sudo supervisorctl status
#
# 5. Monitor logs:
#    tail -f /var/www/html/osmanager/storage/logs/queue-worker.log
#
# =============================================================================
# Management Commands:
# =============================================================================
#
# Start workers:    sudo supervisorctl start osmanager-queue-worker:*
# Stop workers:     sudo supervisorctl stop osmanager-queue-worker:*
# Restart workers:  sudo supervisorctl restart osmanager-queue-worker:*
# View status:      sudo supervisorctl status
# View logs:        sudo supervisorctl tail osmanager-queue-worker
#
# =============================================================================
# Troubleshooting:
# =============================================================================
#
# If workers are not starting:
# 1. Check Laravel application path in 'command' and 'directory'
# 2. Verify www-data user has access to application directory
# 3. Check Laravel .env configuration
# 4. Review supervisor error logs: sudo tail -f /var/log/supervisor/supervisord.log
#
# If jobs are failing:
# 1. Check queue worker logs: tail -f /var/www/html/osmanager/storage/logs/queue-worker.log
# 2. Check Laravel application logs: tail -f /var/www/html/osmanager/storage/logs/laravel.log
# 3. Verify invoice parser setup and permissions
# 4. Test invoice parser manually: cd /var/www/html/osmanager/scripts/invoice-parser && sudo -u www-data python invoice_parser_laravel.py --help
#
# Performance tuning:
# 1. Adjust 'numprocs' based on server CPU cores and workload
# 2. Modify --sleep value (lower = more responsive, higher = less CPU usage)
# 3. Adjust --max-time based on job complexity (longer for heavy parsing jobs)
# 4. Monitor memory usage and adjust --max-time if needed
#
# =============================================================================